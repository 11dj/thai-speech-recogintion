{"version":3,"sources":["recog.js","App.js","serviceWorker.js","index.js"],"names":["Speech","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleListen","recognition","assertThisInitialized","window","console","log","state","listening","start","onend","stop","onstart","finalTranscript","onresult","event","interimTranscript","i","resultIndex","results","length","transcript","isFinal","setState","interim","text","transcriptArr","split","stopCmd","slice","finalText","join","document","getElementById","innerHTML","onerror","error","SpeechRecognition","webkitSpeechRecognition","continous","interimResults","lang","toggleListen","bind","react_default","a","createElement","className","id","onClick","style","backgroundColor","Component","App","recog","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae12ccb9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nclass Speech extends Component {\n  constructor() {\n    super()\n    this.state = {\n      listening: false,\n      interim: `เริ่มแปลงเสียงพูดได้ด้วยกดปุ่ม 'ฟังเลย' ตรงบนขวา`,\n      text: ''\n    }\n    this.recognition = ''\n    if (\"SpeechRecognition\" in window || \"webkitSpeechRecognition\" in window) {\n      const SpeechRecognition = window.webkitSpeechRecognition\n      this.recognition = new SpeechRecognition()\n      this.recognition.continous = true\n      this.recognition.interimResults = true\n      this.recognition.lang = 'th-TH'\n    }\n    this.toggleListen = this.toggleListen.bind(this)\n    this.handleListen = this.handleListen.bind(this)\n  }\n\n  toggleListen() {\n    this.setState({\n      listening: !this.state.listening\n    }, this.handleListen)\n  }\n\n  handleListen = () => {\n    let { recognition } = this\n    if (\"SpeechRecognition\" in window || \"webkitSpeechRecognition\" in window) {\n      console.log('listening?', this.state.listening)\n      if (this.state.listening) {\n        recognition.start()\n        recognition.onend = () => {\n          console.log(\"...continue listening...\")\n          recognition.start()\n        }\n      } else {\n        recognition.stop()\n        recognition.onend = () => {\n          console.log(\"Stopped listening per click\")\n        }\n      }\n\n      recognition.onstart = () => {\n        console.log(\"Listening!\")\n      }\n\n      let finalTranscript = ''\n      recognition.onresult = event => {\n        let interimTranscript = ''\n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcript = event.results[i][0].transcript;\n          if (event.results[i].isFinal) finalTranscript += transcript + ' ';\n          else interimTranscript += transcript;\n        }\n        this.setState({ interim: interimTranscript })\n        this.setState({ text: finalTranscript })\n\n      //-------------------------COMMANDS------------------------------------\n\n        const transcriptArr = finalTranscript.split(' ')\n        const stopCmd = transcriptArr.slice(-3, -1)\n        console.log('stopCmd', stopCmd)\n\n        if (stopCmd[0] === 'stop' && stopCmd[1] === 'listening'){\n          recognition.stop()\n          recognition.onend = () => {\n            console.log('Stopped listening per command')\n            const finalText = transcriptArr.slice(0, -3).join(' ')\n            document.getElementById('final').innerHTML = finalText\n          }\n        }\n      }\n      \n    //-----------------------------------------------------------------------\n      \n      recognition.onerror = event => {\n        console.log(\"Error occurred in recognition: \" + event.error)\n      }\n    }\n  }\n\n  render() {\n    console.log(window.webkitSpeechRecognition)\n    return (\n      <div className='Recog'>\n        <button \n        id='microphone-btn'\n        className='Recog-btn'\n        onClick={this.toggleListen} \n        style={{ backgroundColor: this.state.listening ? 'red' : 'green'}}\n        >{this.state.listening ? 'หยุดฟัง' : 'ฟังเลย'}</button>\n        <div className='Recog-text-div '>\n          <div className='Recog-text'>\n          <p className='Recog-complete-text'>{this.state.text}</p>\n          <p className='Recog-interim-text'>{this.state.interim}</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Speech","import React, { Component } from 'react';\nimport './App.css';\nimport Speech from  './recog'\n\nclass App extends Component {\n  render() {\n    \n    if (\"SpeechRecognition\" in window || \"webkitSpeechRecognition\" in window) {\n      return (\n        <div className=\"App\">\n          <Speech />\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"Recog-text-div Recog-text\">\n          กรุณาใช้ Chrome browser เท่านั้น\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}